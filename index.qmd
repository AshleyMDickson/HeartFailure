---
title: "Heart Failure Analysis"
subtitle: "Handling Nonlinearity & Model Validation"
date: "04-23-2025"
author: "Ashley Dickson"
---

# Introduction

In this document, I build several models of the heart failure data that are able to handle non-linearities in the predictors, generate predictions and perform model validation.

# Setup

## Environment

Load the requisite libraries.

```{r, warning=FALSE, message=FALSE}
library(rms)
library(dplyr)
library(readxl)
library(tidyverse)
library(gtsummary)
library(ggplot2)
library(splines)
library(broom)
library(pROC)
library(knitr)
```

## Data

Having loaded the various libraries needed, let's import our heart failure data.

```{r}
setwd("C:/Users/rmhimdi/OneDrive - University College London/Documents/HeartFailure")
df <- read_excel("simulateddata_LR_NL.xlsx")
```

Discretise age and recode sex.

```{r}
df$age <- round(df$age, 0)
n = 5
df <- df %>%
  mutate(Age_ = paste0(
    n*floor(age/n), "-",n*(floor(age/n)+1)
    )
  )
df$sex <- factor(df$sex, levels = c(0, 1), labels = c("Male", "Female")) 
## Assuming Female = 1 since this seems mildly protective (cf. MAGGIC), but will need to check.
```

Renaming varibles.

```{r}
df <- 
  df %>% 
  rename(
    Outcome = outcome,
    Age = age,
    Sex = sex,
    Creatinine = creatineDischarge,
    Sodium = sodiumDischarge,
    Potassium = potassiumDischarge,
    Urea = ureaDischarge,
    S_bp =  sbpAdmission,
    HR = hrAdmission,
    Hb = hbDischarge,
    Diabetes = diabetes,
    COPD = copd,
    IHD = ihd, 
    ValveDisease = valveDisease,
    NYHA_class = nyha,
    PeripheralOedema = peripheralOedema,
    AF = af,
    eGFR = egfr_full
  )
```

Inspect the processed data.

```{r}
kable(head(df))
```

### Hold Out
During model evaluation, we will need to conduct predictive validation using the test set having estimated the model coefficients on the training set.

```{r}
set.seed(1729)
records <- dim(df)[1]

train_size <- floor(0.8*records)
train_index <- sample(seq_len(records), size = train_size)
train <- df[train_index,]
test <- df[-train_index,]
print(paste("Size of training set is: ", nrow(train)))
print(paste("Size of testing set is: ", nrow(test)))
```

# Modelling

## Full Model
Run the naive model with all variables to see outline effect sizes.

```{r}
#Sans age categorisation
full_model <- glm(Outcome ~ Age + Sex  + Creatinine + Sodium + Potassium + Urea + S_bp + HR + Hb+ Diabetes + COPD + IHD + ValveDisease + NYHA_class + PeripheralOedema + AF + eGFR, family = binomial, data = df)
print(summary(full_model))

print("Odd Ratios")
kable(exp(coef(full_model)))
```

While these Odds Ratios give us an outline picture of the effects, it is unlikely that all relationships are linear in the 'true' model. So, let's try a few ways of relaxing the linearity assumption.

## Age
Let's try to identify any nonlinear age effect. We can do this in a few different ways.

### Categorisation
Let's start by using the age quintiles. We run two models to compare:

```{r}
mod1 <- train %>% 
  glm(formula = Outcome ~ Age, family = binomial)
summary(mod1)
```

```{r}
mod1 <- train %>% 
  glm(formula = Outcome ~ Age_, family = binomial)
summary(mod1)
```

### Splines

```{r}
mod3 <- glm(Outcome ~ ns(Age, df=3) + Sex  + ns(Creatinine, df=3) + Sodium + ns(Potassium, df=3) + ns(Urea, df=3) + S_bp + HR + Hb+ Diabetes + COPD + IHD + ValveDisease + NYHA_class + PeripheralOedema + AF + eGFR, family = binomial, data = train)
print(summary(mod3))
```

### Hierarchical


This is a Quarto website. To learn more about Quarto websites visit <https://quarto.org/docs/websites>.
